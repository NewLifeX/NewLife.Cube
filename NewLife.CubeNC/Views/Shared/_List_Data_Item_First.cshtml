@using NewLife;
@using Microsoft.AspNetCore.Routing
@using XCode;
@using XCode.Configuration;
@{
    var pair = (ValueTuple<IEntity, DataField>)Model;
    var entity = pair.Item1;
    var item = pair.Item2;

    var value = entity[item.Name];
}
@if (item.PrimaryKey)
{
    <td class="text-center">@value</td>
}
else
{
    switch (Type.GetTypeCode(item.Type))
    {
        case TypeCode.Boolean:
            if ((Boolean)value)
            {
                <td class="text-center">
                    <i class="glyphicon glyphicon-ok" style="color: green;"></i>
                </td>
            }
            else
            {
                <td class="text-center">
                    <i class="glyphicon glyphicon-remove" style="color: red;"></i>
                </td>
            }
            break;
        case TypeCode.DateTime:
            var dt = (DateTime)value;
            if (dt > DateTime.MinValue && dt.Year > 1900)
            {
                <td class="text-center">@(((DateTime)value).ToFullString(""))</td>
            }
            else
            {
                <td class="text-center"></td>
            }
            break;
        case TypeCode.Decimal:
            <td class="text-center">@value</td>
            break;
        case TypeCode.Single:
        case TypeCode.Double:
            <td class="text-center">@value</td>
            break;
        case TypeCode.Byte:
        case TypeCode.Int16:
        case TypeCode.Int32:
        case TypeCode.Int64:
        case TypeCode.UInt16:
        case TypeCode.UInt32:
        case TypeCode.UInt64:
            //特殊处理枚举
            if (item.Type.IsEnum)
            {
                var v = value;
                var val = v + "";
                try
                {
                    val = EnumHelper.GetDescription((Enum)v) ?? v + "";
                }
                catch { }
                <td class="text-center">@val</td>
            }
            else
            {
                <td class="text-center">@Convert.ToInt64(value).ToString("n0")</td>
            }
            break;
        case TypeCode.String:
        default:
            {
                if (!item.MapField.IsNullOrEmpty() && item.MapProvider != null && value + "" != "")
                {
                    var name = item.MapProvider.EntityType.Name;
                    var key = item.MapProvider.Key;
                    var val = entity[item.MapField];
                    <td class="text-center"><a href="@name?@key=@val">@value</a></td>
                }
                else
                {
                    <td class="text-center">@value</td>
                }
            }
            break;
            @*default:
                <td>@value</td>
                break;*@
    }
}